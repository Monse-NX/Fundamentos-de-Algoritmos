#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX 64 // Cambia esto si necesitas matrices más grandes

// Función para crear matrices dinámicamente
void leerMatriz(int M[MAX][MAX], int n, char nombre) {
    printf("Ingrese los elementos de la matriz %c (%dx%d):\n", nombre, n, n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &M[i][j]);
}

void imprimirMatriz(int M[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", M[i][j]);
        printf("\n");
    }
}

// Suma de matrices
void sumar(int A[MAX][MAX], int B[MAX][MAX], int R[MAX][MAX], int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            R[i][j] = A[i][j] + B[i][j];
}

// Resta de matrices
void restar(int A[MAX][MAX], int B[MAX][MAX], int R[MAX][MAX], int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            R[i][j] = A[i][j] - B[i][j];
}

// Multiplicación de matrices por Strassen
void strassen(int A[MAX][MAX], int B[MAX][MAX], int C[MAX][MAX], int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int mid = n / 2;
    int A11[MAX][MAX], A12[MAX][MAX], A21[MAX][MAX], A22[MAX][MAX];
    int B11[MAX][MAX], B12[MAX][MAX], B21[MAX][MAX], B22[MAX][MAX];
    int M1[MAX][MAX], M2[MAX][MAX], M3[MAX][MAX], M4[MAX][MAX];
    int M5[MAX][MAX], M6[MAX][MAX], M7[MAX][MAX];
    int T1[MAX][MAX], T2[MAX][MAX];

    // Separar submatrices
    for (int i = 0; i < mid; i++) {
        for (int j = 0; j < mid; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + mid];
            A21[i][j] = A[i + mid][j];
            A22[i][j] = A[i + mid][j + mid];

            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + mid];
            B21[i][j] = B[i + mid][j];
            B22[i][j] = B[i + mid][j + mid];
        }
    }

    // M1 = (A11 + A22)(B11 + B22)
    sumar(A11, A22, T1, mid);
    sumar(B11, B22, T2, mid);
    strassen(T1, T2, M1, mid);

    // M2 = (A21 + A22) * B11
    sumar(A21, A22, T1, mid);
    strassen(T1, B11, M2, mid);

    // M3 = A11 * (B12 - B22)
    restar(B12, B22, T1, mid);
    strassen(A11, T1, M3, mid);

    // M4 = A22 * (B21 - B11)
    restar(B21, B11, T1, mid);
    strassen(A22, T1, M4, mid);

    // M5 = (A11 + A12) * B22
    sumar(A11, A12, T1, mid);
    strassen(T1, B22, M5, mid);

    // M6 = (A21 - A11) * (B11 + B12)
    restar(A21, A11, T1, mid);
    sumar(B11, B12, T2, mid);
    strassen(T1, T2, M6, mid);

    // M7 = (A12 - A22) * (B21 + B22)
    restar(A12, A22, T1, mid);
    sumar(B21, B22, T2, mid);
    strassen(T1, T2, M7, mid);

    // Calcular C11, C12, C21, C22
    int C11[MAX][MAX], C12[MAX][MAX], C21[MAX][MAX], C22[MAX][MAX];

    sumar(M1, M4, T1, mid);
    restar(T1, M5, T2, mid);
    sumar(T2, M7, C11, mid); // C11 = M1 + M4 - M5 + M7

    sumar(M3, M5, C12, mid); // C12 = M3 + M5

    sumar(M2, M4, C21, mid); // C21 = M2 + M4

    sumar(M1, M3, T1, mid);
    restar(T1, M2, T2, mid);
    sumar(T2, M6, C22, mid); // C22 = M1 - M2 + M3 + M6

    // Combinar en C
    for (int i = 0; i < mid; i++) {
        for (int j = 0; j < mid; j++) {
            C[i][j] = C11[i][j];
            C[i][j + mid] = C12[i][j];
            C[i + mid][j] = C21[i][j];
            C[i + mid][j + mid] = C22[i][j];
        }
    }
}

int esPotenciaDe2(int n) {
    return (n != 0) && ((n & (n - 1)) == 0);
}

int main() {
    int n;
    int A[MAX][MAX], B[MAX][MAX], C[MAX][MAX] = {0};

    printf("Ingrese el tamaño de las matrices cuadradas (potencia de 2, máximo %d): ", MAX);
    scanf("%d", &n);

    if (!esPotenciaDe2(n) || n > MAX) {
        printf("Error: El tamaño debe ser una potencia de 2 y menor o igual a %d.\n", MAX);
        return 1;
    }

    leerMatriz(A, n, 'A');
    leerMatriz(B, n, 'B');

    clock_t inicio = clock();

    strassen(A, B, C, n);

    clock_t fin = clock();

    double tiempo = (double)(fin - inicio) / CLOCKS_PER_SEC;

    printf("\nResultado de A x B (Strassen):\n");
    imprimirMatriz(C, n);

    printf("\nTiempo de ejecución: %f segundos\n", tiempo);

    return 0;
}
